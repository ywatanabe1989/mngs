# Tox configuration file
# https://tox.readthedocs.io/en/latest/config.html

[tox]
envlist = py{38,39,310,311,312}, coverage-report, lint, docs
isolated_build = True
skip_missing_interpreters = True

[testenv]
description = Run unit tests with pytest
deps =
    pytest>=7.0
    pytest-cov
    pytest-xdist
    pytest-timeout
    -r{toxinidir}/requirements.txt
commands =
    pytest {posargs:tests} \
        --cov=mngs \
        --cov-report=term-missing \
        --cov-append \
        -v \
        --tb=short
setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}

[testenv:coverage-report]
description = Combine coverage data and generate reports
deps = 
    coverage[toml]>=6.0
    coverage-badge
skip_install = true
commands =
    coverage combine {toxworkdir}/.coverage.*
    coverage report --skip-empty --show-missing
    coverage html
    coverage xml
    coverage-badge -o coverage.svg -f
    coverage report --fail-under=85

[testenv:lint]
description = Run code quality checks
deps =
    black
    isort
    flake8
    flake8-docstrings
    mypy
    pylint
skip_install = true
commands =
    black --check --diff src/ tests/
    isort --check-only --diff src/ tests/
    flake8 src/ tests/
    mypy src/mngs --ignore-missing-imports
    pylint src/mngs --fail-under=8.0

[testenv:format]
description = Auto-format code
deps =
    black
    isort
skip_install = true
commands =
    black src/ tests/
    isort src/ tests/

[testenv:docs]
description = Build documentation
deps =
    sphinx>=4.0
    sphinx-rtd-theme
    sphinx-autodoc-typehints
    myst-parser
changedir = docs
commands =
    sphinx-build -b html -W . _build/html

[testenv:type-check]
description = Run type checking with mypy
deps =
    mypy
    types-requests
    types-setuptools
    pandas-stubs
commands =
    mypy src/mngs --install-types --non-interactive

[testenv:security]
description = Run security checks
deps =
    bandit[toml]
    safety
commands =
    bandit -r src/mngs
    safety check

[testenv:py{38,39,310,311,312}-minimal]
description = Test with minimal dependencies
deps =
    pytest>=7.0
    pytest-timeout
commands =
    pytest {posargs:tests} -v

# Configuration for specific tools
[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

[coverage:run]
source = src/mngs
branch = True
parallel = True

[coverage:report]
skip_empty = True
show_missing = True
precision = 2
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod

[flake8]
max-line-length = 88
extend-ignore = E203, W503, D100, D101, D102, D103, D104, D105, D106, D107
exclude = 
    .tox,
    .git,
    __pycache__,
    build,
    dist,
    *.egg-info,
    .old,
    ._*

[isort]
profile = black
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
use_parentheses = True
ensure_newline_before_comments = True
line_length = 88

[mypy]
python_version = 3.8
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = False
ignore_missing_imports = True